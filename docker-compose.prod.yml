# Production Docker Compose Configuration
# Optimized for production deployment with security and performance

version: '3.8'

services:
  # Production PostgreSQL with optimizations
  postgres:
    image: postgres:16-alpine
    container_name: dharmaguard-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/postgresql/init:/docker-entrypoint-initdb.d:ro
      - ./database/postgresql/conf/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - dharmaguard-prod-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production Redis with persistence and security
  redis:
    image: redis:7-alpine
    container_name: dharmaguard-redis-prod
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dharmaguard-prod-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production ClickHouse for analytics
  clickhouse:
    image: clickhouse/clickhouse-server:24
    container_name: dharmaguard-clickhouse-prod
    restart: unless-stopped
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data_prod:/var/lib/clickhouse
      - ./database/clickhouse/init:/docker-entrypoint-initdb.d:ro
      - ./database/clickhouse/config/config.xml:/etc/clickhouse-server/config.xml:ro
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dharmaguard-prod-network

  # Production Kafka with optimizations
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: dharmaguard-zookeeper-prod
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper_data_prod:/var/lib/zookeeper/data
      - zookeeper_logs_prod:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dharmaguard-prod-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: dharmaguard-kafka-prod
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data_prod:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - dharmaguard-prod-network

  # Core Surveillance Engine - Production Optimized
  surveillance-engine:
    image: dharmaguard/surveillance-engine:latest
    container_name: dharmaguard-surveillance-engine-prod
    restart: unless-stopped
    ports:
      - "50051:50051"
      - "8080:8080"
    environment:
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - KAFKA_BROKERS=kafka:29092
      - LOG_LEVEL=INFO
      - THREAD_COUNT=16
      - QUEUE_SIZE=1000000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./configs/surveillance:/app/configs:ro
      - surveillance_logs_prod:/app/logs
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50051"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - dharmaguard-prod-network

  # User Service - Production
  user-service:
    image: dharmaguard/user-service:latest
    container_name: dharmaguard-user-service-prod
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - RUST_LOG=info
      - RUST_BACKTRACE=1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dharmaguard-prod-network

  # Compliance Service - Production
  compliance-service:
    image: dharmaguard/compliance-service:latest
    container_name: dharmaguard-compliance-service-prod
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - KAFKA_BROKERS=kafka:29092
      - SEBI_API_KEY=${SEBI_API_KEY}
      - RUST_LOG=info
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dharmaguard-prod-network

  # Reporting Service - Production
  reporting-service:
    image: dharmaguard/reporting-service:latest
    container_name: dharmaguard-reporting-service-prod
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - CLICKHOUSE_URL=http://${CLICKHOUSE_USER}:${CLICKHOUSE_PASSWORD}@clickhouse:8123/${CLICKHOUSE_DB}
      - KAFKA_BROKERS=kafka:29092
      - RUST_LOG=info
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - reports_data_prod:/app/reports
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dharmaguard-prod-network

  # Audit Service - Production
  audit-service:
    image: dharmaguard/audit-service:latest
    container_name: dharmaguard-audit-service-prod
    restart: unless-stopped
    ports:
      - "8084:8084"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - MONGODB_URL=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DB}
      - KAFKA_BROKERS=kafka:29092
      - BLOCKCHAIN_RPC_URL=${BLOCKCHAIN_RPC_URL}
      - SMART_CONTRACT_ADDRESS=${SMART_CONTRACT_ADDRESS}
      - BLOCKCHAIN_PRIVATE_KEY=${BLOCKCHAIN_PRIVATE_KEY}
      - RUST_LOG=info
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dharmaguard-prod-network

  # API Gateway - Production
  api-gateway:
    image: dharmaguard/api-gateway:latest
    container_name: dharmaguard-api-gateway-prod
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "9090:9090"
    environment:
      - USER_SERVICE_URL=http://user-service:8081
      - COMPLIANCE_SERVICE_URL=http://compliance-service:8082
      - REPORTING_SERVICE_URL=http://reporting-service:8083
      - AUDIT_SERVICE_URL=http://audit-service:8084
      - SURVEILLANCE_ENGINE_URL=surveillance-engine:50051
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - RATE_LIMIT_REQUESTS_PER_MINUTE=5000
      - ENVIRONMENT=production
    depends_on:
      - user-service
      - compliance-service
      - reporting-service
      - audit-service
      - surveillance-engine
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dharmaguard-prod-network

  # Frontend - Production
  frontend:
    image: dharmaguard/frontend:latest
    container_name: dharmaguard-frontend-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=https://api.dharmaguard.com
      - NEXT_PUBLIC_WS_URL=wss://api.dharmaguard.com/ws
      - NODE_ENV=production
    depends_on:
      - api-gateway
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dharmaguard-prod-network

  # ML Platform - Production
  ml-platform:
    image: dharmaguard/ml-platform:latest
    container_name: dharmaguard-ml-platform-prod
    restart: unless-stopped
    ports:
      - "8090:8090"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - CLICKHOUSE_URL=http://${CLICKHOUSE_USER}:${CLICKHOUSE_PASSWORD}@clickhouse:8123/${CLICKHOUSE_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - KAFKA_BROKERS=kafka:29092
      - MODEL_STORE_PATH=/app/models
      - PYTHONPATH=/app
    volumes:
      - ml_models_prod:/app/models
      - ml_data_prod:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      kafka:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dharmaguard-prod-network

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: dharmaguard-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs_prod:/var/log/nginx
    depends_on:
      - api-gateway
      - frontend
    networks:
      - dharmaguard-prod-network

networks:
  dharmaguard-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  clickhouse_data_prod:
    driver: local
  kafka_data_prod:
    driver: local
  zookeeper_data_prod:
    driver: local
  zookeeper_logs_prod:
    driver: local
  ml_models_prod:
    driver: local
  ml_data_prod:
    driver: local
  reports_data_prod:
    driver: local
  surveillance_logs_prod:
    driver: local
  nginx_logs_prod:
    driver: local
